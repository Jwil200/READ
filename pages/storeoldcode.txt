// components/store.js *Based from dashboard.js at the moment
import React, { useState, useEffect, useRef } from 'react';
import { ActivityIndicator , StyleSheet, View, Text, FlatList } from 'react-native';
import { Divider, Dialog } from "@rneui/themed";
import { SearchBar, Button} from 'react-native-elements';
import BookStoreTile from "../components/bookStoreTile.js";
import firestore from '@react-native-firebase/firestore';
import auth from '@react-native-firebase/auth';
import Dialog from "react-native-dialog";

const styles = StyleSheet.create({
  screen: {
    height: '100%',
    width: '100%',
    paddingTop: 25,

    backgroundColor: '#fff'
  },
  container: {
    flex: 1,
    display: "flex",
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    paddingTop: 10,
    height: '100%'
  },
  grid: {
    width: '100%'
  },
  item: {
    width: "31.5%",
    alginItems: "center",
    margin: 5,
    backgroundColor: '#e9eef1'
  },
  title: {
    fontSize: 24,
    textAlign: 'left',
    width: '100%',
    paddingTop: 10
  },
  divider: {
    width: '98%',
    marginVertical: 10,
  },
  emptyText: {
    color: "white",
    marginTop: 10
  }
});


const Item = ({ item }) => (
  <View style={[styles.item, {marginBottom: 0, height: 150}]}>
    <BookStoreTile 
     key={"i" + item._id} 
     coverUrl={item.coverUrl} 
     author={item.authorName}
     id={item._id}
     description={item.bookDes}
     title= {item.bookName}
     content={item.content}
     price={item.price}
/>
  </View>
);

const ComponentItem = ({ item }) => (
  <View>{item.jsx}</View>
);


const Store = ({ navigation }) => {
  let isInitialMount = useRef(true);
  let recentData = 0;
  const[bookData, setBooks] = useState([]);
  const[justForYou, setJustForYou] = useState([]);
  const[search, setSearch] = useState('');
  const[visible, setVisible] = useState(false);
  const[selectedGenre, setSelectedGenre] = useState("")
  const[filteredBooks, setFilteredBooks] = useState("")

  let componentList = [];
  const currentUid = auth().currentUser.uid;
  const db = firestore();

  const filterBooks = () =>{
    setVisible(true);
  }

  const handleCancel = () =>{
    setVisible(false);
  }

  const clearFilter = () =>{
    setSelectedGenre('');
    setVisible(false);
  }

  const handleFilter = () => {
    console.log("selected Genre: ", selectedGenre);
    db
    .collection('Books')
    .where('Genre', '==', selectedGenre)
    .get()
    .then(querySnapshot => {
      const books = []
      querySnapshot.forEach(documentSnapshot =>{
        const { Name, Author, Description, Cover, Age, Content, Price} = documentSnapshot.data();
        books.push({
          _id: doc.id,
          bookName: Name,
          authorName: Author,
          bookDes: Description,
          coverUrl:  Cover,
          age: Age,
          content: Content,
          price: Price,
        })
      })
      setFilteredBooks(books);
    })
    setVisible(false)
  }

  const getJustForYou = (newlist, age) =>{
    let data = newlist;
    let newData = data.filter((data) => data.age < age)
    setJustForYou(newData);
  }

  const getBooks = async() => {//Gets the books from the books Collection
    const list = [];
    await db
    .collection('Books')
    .get()
    .then(querySnapshot => {
      querySnapshot.forEach(doc => {
        const { Name, Author, Description, Cover, Age, Price, Genre} = doc.data();
        list.push({
          _id: doc.id,
          bookName: Name,
          bookGenre: Genre,
          authorName: Author,
          bookDes: Description,
          coverUrl:  Cover,
          age: Age,
          price: Price,
        })
      })
    });

    let data = [];
    await db 
    .collection('Users')
    .doc(currentUid)
    .get()
    .then(documentSnapshot => {
      console.log('User exists: ', documentSnapshot.exists);
      if (documentSnapshot.exists) {
        console.log('User data: ', documentSnapshot.data());
        let data = documentSnapshot.data();
        getJustForYou(list, data.age);
      }
    });
    console.log("Book Genres: ", list.bookGenre )
    setBooks(list);
  }

  if (search) {//Search function
    const newData = bookData.filter(function (item) { //Create an array of newData that filters library data
      const itemData = item.bookName
        ? item.bookName.toUpperCase()
        : ''.toUpperCase();
      const textData = search.toUpperCase();
      return itemData.indexOf(textData) > -1;
    });

    componentList.push({ //Populate the filtered list with the book componenets
        _id: 1,
        jsx:
          <View style={styles.container}>
            {
        (newData.length == 0)
        ? <Text style={styles.emptyText}>Book not available.</Text>
              : <FlatList style={styles.grid}
            data={newData}
                  numColumns={3}
                  renderItem={Item}
            keyExtractor={item => "a" + item._id}
            listKey="a"
                />
            }
            </View>  
    });
  }
  else if(selectedGenre && !visible){
    componentList.push({ //Populate the filtered list with the book componenets
      _id: 1,
      jsx:
        <View style={styles.container}>
          {
      (filteredBooks.length == 0)
      ? <Text style={styles.emptyText}>Book not available.</Text>
            : <FlatList style={styles.grid}
          data={filteredBooks}
                numColumns={3}
                renderItem={Item}
          keyExtractor={item => "a" + item._id}
          listKey="a"
              />
          }
          </View>  
  });
  }

  else {
    componentList.push({
      _id: 1,
      jsx: 
        <View style={styles.container}>
          <Text style={styles.title}>New</Text>
          <Divider style={styles.divider} />
          {
            (recentData.length == 0)
            ? <Text style={styles.emptyText}>No books have been added recently.</Text>
            : <FlatList style={styles.grid}
                data={recentData}
                numColumns={3}
                renderItem={Item}
                keyExtractor={item => "r" + item._id}
                listKey="r"
              />
          }
        </View>
    });
    componentList.push({
      _id: 2,
      jsx: 
        <View style={styles.container}>
              <Text style={styles.title}>Just for You</Text>
          <Divider style={styles.divider} />
          {
                (justForYou.length == 0)
                ? <Text style={styles.emptyText}>No Popular books currently.</Text>
            : <FlatList style={styles.grid}
                    data={justForYou}
                numColumns={3}
                renderItem={Item}
                keyExtractor={item => "f" + item._id}
                listKey="f"
              />
          }
        </View>
    });
    componentList.push({
      _id: 3,
      jsx:
        <View style={styles.container}>
          <Text style={styles.title}>All</Text>
          <Divider style={styles.divider} />
          {
                (bookData.length == 0)
                ? <Text style={styles.emptyText}>The store is empty...</Text>
            : <FlatList style={styles.grid}
                    data={bookData}
                numColumns={3}
                renderItem={Item}
                keyExtractor={item => "a" + item._id}
                listKey="a"
              />
          }
        </View>
    });
  }
      
  useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
      getBooks();

    }
  }, []);

  console.log(isInitialMount.current);

  return (
    (!isInitialMount)
    ? 
      <View style={{justifyContent: 'center', alignItems: 'center', flex: 1}}>
        <ActivityIndicator size="large"/>
      </View>
    :
    <View style={{flex: 1}}>
      <View style={{flex: 0.9}}>
        <SearchBar round 
          cancelButtonTitle='X'
          lightTheme
          searchIcon={{ size: 20 }}
          inputStyle={{backgroundColor: 'white'}}
          placeholderTextColor={'#g5g5g5'}
          placeholder={'Search'}
          inputContainerStyle={{ 
            backgroundColor: 'white',
          }} 
          value={search}
          onChangeText={(text) => setSearch(text)}
          onClear={(text) => setSearch('')}
        />
        <Button title="Filter Genre" onPress={filterBooks}/>
        <FlatList
          data={componentList}
          renderItem={ComponentItem}
          keyExtractor={item => item._id}
        />
          <Dialog.Container visible ={visible} onBackdropPress={handleCancel}>
          <Dialog.Title>Filter by Genre</Dialog.Title>
          <Dialog.Input 
            placeholder="Select genre"
            onChangeText={text => setSelectedGenre(text)}
          />
          <Dialog.Button label="Reset" onPress={(clearFilter)}/>
          <Dialog.Button label="Cancel" onPress={() => setVisible(false)}/>
          <Dialog.Button label="Filter" onPress={(handleFilter)}/>
        </Dialog.Container>
      </View>
    </View>
  );
}


export default Store








EXPO EXAMPLE:


import React, { useState } from 'react';
import {
Button,
Dialog,
CheckBox,
ListItem,
Avatar,
} from '@rneui/themed';
import { View, Text, StyleSheet } from 'react-native';

type DialogComponentProps = {};

const Dialogs: React.FunctionComponent<DialogComponentProps> = () => {
const [visible1, setVisible1] = useState(false);
const [visible2, setVisible2] = useState(false);
const [visible3, setVisible3] = useState(false);
const [visible4, setVisible4] = useState(false);
const [visible5, setVisible5] = useState(false);
const [visible6, setVisible6] = useState(false);
const [checked, setChecked] = useState(1);

const toggleDialog1 = () => {
  setVisible1(!visible1);
};
const toggleDialog2 = () => {
  setVisible2(!visible2);
};
const toggleDialog3 = () => {
  setVisible3(!visible3);
};
const toggleDialog4 = () => {
  setVisible4(!visible4);
};
const toggleDialog5 = () => {
  setVisible5(!visible5);
};
const toggleDialog6 = () => {
  setVisible6(!visible6);
};

const userlist = [
  {
    name: 'Amy Farha',
    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',
    subtitle: 'amy.farha@gmail.com',
  },
  {
    name: 'Chris Jackson',
    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',
    subtitle: 'cjackson@gmail.com',
  },
  {
    name: 'Amanda Martin',
    avatar_url:
      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',
    subtitle: 'amandam@gmail.com',
  },
];

return (
  <View>
    <View style={styles.buttonContainer}>
      <Button
        title="Open Simple Dialog"
        onPress={toggleDialog1}
        buttonStyle={styles.button}
      />
      <Button
        title="Open Mutli Action Dialog"
        onPress={toggleDialog2}
        buttonStyle={styles.button}
      />
      <Button
        title="Open Loading Dialog"
        onPress={toggleDialog3}
        buttonStyle={styles.button}
      />
      <Button
        title="Open Buttonless Dialog"
        onPress={toggleDialog4}
        buttonStyle={styles.button}
      />
      <Button
        title="Open Custom Dialog 1"
        onPress={toggleDialog5}
        buttonStyle={styles.button}
      />
      <Button
        title="Open Custom Dialog 2"
        onPress={toggleDialog6}
        buttonStyle={styles.button}
      />
    </View>
    <Dialog
      isVisible={visible1}
      onBackdropPress={toggleDialog1}
    >
      <Dialog.Title title="Dialog Title"/>
      <Text>Dialog body text. Add relevant information here.</Text>
    </Dialog>
    <Dialog
      isVisible={visible2}
      onBackdropPress={toggleDialog2}
    >
      <Dialog.Title title="Dialog Title"/>
      <Text>Dialog body text. Add relevant information here.</Text>
      <Dialog.Actions>
        <Dialog.Button title="ACTION 1" onPress={() => console.log('Primary Action Clicked!')}/>
        <Dialog.Button title="ACTION 2" onPress={() => console.log('Secondary Action Clicked!')}/>
      </Dialog.Actions>
    </Dialog>
    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>
      <Dialog.Loading />
    </Dialog>
    <Dialog
      isVisible={visible4}
      onBackdropPress={toggleDialog4}
    >
      <Dialog.Title title="Dialog Title"/>
      <Text>Dialog body text. Add relevant information here.</Text>
    </Dialog>
    <Dialog
      isVisible={visible5}
      onBackdropPress={toggleDialog5}
    >
      <Dialog.Title title="Select Preference"/>
      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (
        <CheckBox
          key={i}
          title={l}
          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}
          checkedIcon="dot-circle-o"
          uncheckedIcon="circle-o"
          checked={checked === i + 1}
          onPress={() => setChecked(i + 1)}
        />
      ))}

      <Dialog.Actions>
        <Dialog.Button
          title="CONFIRM"
          onPress={() => {
            console.log(`Option ${checked} was selected!`);
            toggleDialog5();
          }}
        />
        <Dialog.Button title="CANCEL" onPress={toggleDialog5} />
      </Dialog.Actions>
    </Dialog>
    <Dialog
      isVisible={visible6}
      onBackdropPress={toggleDialog6}
    >
      <Dialog.Title title="Choose Account"/>
      {userlist.map((l, i) => (
        <ListItem
          key={i}
          containerStyle={{
            marginHorizontal: -10,
            borderRadius: 8,
          }}
          onPress={toggleDialog6}
        >
          <Avatar rounded source={{ uri: l.avatar_url }} />
          <ListItem.Content>
            <ListItem.Title style={{ fontWeight: '700' }}>
              {l.name}
            </ListItem.Title>
            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>
          </ListItem.Content>
        </ListItem>
      ))}
    </Dialog>
  </View>
);
};

const styles = StyleSheet.create({
button: {
  borderRadius: 6,
  width: 220,
  margin: 20,
},
buttonContainer: {
  margin: 20,
  justifyContent: 'center',
  alignItems: 'center',
},
});

export default Dialogs;


  return (
    <View>
      <Button title="Select Genre" onPress={handleOpenDialog} />
      <Text>Selected genre: {selectedGenre}</Text>
      <Dialog visible={isVisible} onDismiss={() => setIsVisible(false)}>
        <Dialog.Title>Select Genre</Dialog.Title>
        {genreList.map((genre, index) => (
          <ListItem
            key={index}
            onPress={() => handleGenreSelect(genre.name)}
            bottomDivider
          >
            <Avatar source={{ uri: genre.avatar_url }} />
            <ListItem.Content>
              <ListItem.Title>{genre.name}</ListItem.Title>
              <ListItem.Subtitle>{genre.subtitle}</ListItem.Subtitle>
            </ListItem.Content>
          </ListItem>
        ))}
        <Dialog.Actions>
          <Button onPress={handleDoneButton}>Done</Button>
        </Dialog.Actions>
      </Dialog>
    </View>
  );
};

export default GenreDialog;




